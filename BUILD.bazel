load("@npm//:firebase-tools/package_json.bzl", firebase_tools_bin = "bin")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("//:jekyll.bzl", "jekyll_build")

npm_link_all_packages()

#filegroup(
#  name = "jekyll-script",
#  srcs = ["scripts/bundle.sh"],
#)

filegroup(
  name = "jekyll-srcs",
  srcs = [
    "site/.bundle/config",
    "site/_config.yml",
    "site/Gemfile",
    "site/Gemfile.lock",
  ] + glob([
    "site/*.html",
    "site/*.markdown",
    "site/vendor/**/*",
    "site/assets/**/*",
    "site/_sass/*.scss", 
    "site/_posts/*.markdown",
    "site/_layouts/*.html",
    "site/_includes/*.html",
    "site/_data/*.yml",
    "site/_data/*.json",
  ],
  exclude = [
    "site/vendor/**/*.md",
    "site/vendor/bundle/ruby/3.1.0/gems/jekyll-3.9.3/lib/site_template/_posts/0000-00-00-welcome-to-jekyll.markdown.erb*"
    #"site/vendor/**/*.erb",
  ]),
)

filegroup(
  name = "jekyll-output",
  srcs = glob(["_site/**/*"])
)

# TODO: This doesn't have access to the site directory
sh_binary(
    name = "j-serve",
    srcs = ["scripts/bundle.sh"],
    args = ["site", "exec", "jekyll", "serve"],
    data = [":jekyll-srcs"],
)

# TODO: Needed: bundle config set --local path 'vendor/bundle'
jekyll_build(
  name="serve",
  srcs = [
    ":jekyll-srcs",
  ],
  outputs = [
    ":jekyll-output",
  ],
)

filegroup(
  name = "site-files",
  srcs = glob(["site/_site/**/*"]),
#  data = ["site"],
)

filegroup(
  name = "firebase-json",
  srcs = [
    "firebase.json",
  ],
)

filegroup(
  name = "firebase-configs",
  srcs = [
    ".firebaserc",
  ] + glob([".firebase/*"]),
)

# TODO: Link the output from above to the firebase cli (i.e. where the files are in the sandbox)
firebase_tools_bin.firebase_binary(
    name = "deploy",
    args = [
        "-c",
        "$(rootpath firebase-json)",
        "--project",
        "my-website-f4e0d",
        "deploy",
        "--only",
        "hosting:lvauthrin",
    ],
    data = [
      "firebase-json",
      "firebase-configs",
      "site-files",
    ],
)

